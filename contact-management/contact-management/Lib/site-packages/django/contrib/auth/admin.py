from django.conf import settings
from django.contrib import admin, messages
from django.contrib.admin.options import IS_POPUP_VAR
from django.contrib.admin.utils import unquote
from django.contrib.auth import update_session_auth_hash
from django.contrib.auth.forms import (
    AdminPasswordChangeForm, UserChangeForm, UserCreationForm,UserForm,UserFormProxy,MyForm
)
from django.contrib.auth.models import Group, User
from django.core.exceptions import PermissionDenied
from django.db import router, transaction
from django.db.models.signals import post_save
from django.http import Http404, HttpResponseRedirect
from django.template.response import TemplateResponse
from django.urls import path, reverse
from django.utils.decorators import method_decorator
from django.utils.html import escape
from django.utils.translation import gettext, gettext_lazy as _
from django.views.decorators.csrf import csrf_protect
from django.views.decorators.debug import sensitive_post_parameters
from django.utils.safestring import mark_safe
from django.contrib.auth.signals import user_logged_in, user_logged_out
from django.dispatch import receiver
from django.conf import settings
from django.contrib.auth.models import Permission
from django.http import request
from django.dispatch import Signal
import django.shortcuts
from django import forms

csrf_protect_m = method_decorator(csrf_protect)
sensitive_post_parameters_m = method_decorator(sensitive_post_parameters())
USER_HR=[
    'tanvir',
    'ismam',
]
USER_SW=[
    'jawad',
    'tarhib',
    'mohebur',
]
USER_HW=[
    'himu',
    'redwan',
    'mashahed',
    'saleh',
    'tanveer',
    'ismail',
    'dipu',
    'asad',
    'kamrul',
    'tashfia',
    'rafid',
    'amit',
    'mehedi',
    'shadman',
    'musanna',
    'uday',
    'rity',
    'ayemon',
    'jahir',
    'nazim',
]

DESIGNATION_HW=(
    'bDesignEngineer',#'Design Engineer'),
    'abSrDesignEngineer',#'Sr. Design Engineer'),
    'aaProgramManager', #'Program Manager'),
)
DESIGNATION_SW=(
    'bSrEngineer', #'S/W Engineer'),
    'abLeadS/WEngineer',#'Lead S/W Engineer'),
)
DESIGNATION_HR=(
    'aaHRManager',#'HR Manager'
)
DEPARTMENT_HW=(
    ("engineering","Engineering"),
    # ("humanresources","Human Resources"),
    # ("managerial","Managerial")
)
SENIOR_HW=(
    ('abSrDesignEngineer','Sr. Design Engineer'),
    ('aaProgramManager', 'Program Manager'),
)
SENIOR_SW=(
    ('abLeadS/WEngineer','Lead S/W Engineer'),
)
LEAD=(
    ("QMN","Quazi Md Mohebur Rahman"),
)
REPORTING_SUPERVISOR=(
    ("QMN","Quazi Md Mohebur Rahman"),
    ("ISM","Md. Ismail Hossain Masum"),
    ("SH","Md. Shakhawat Hossain"),
)
LINE_MANAGER=(
    ("SO","Mr. Saleh Omar"),
    ("MMR","Mridha Md. Mashahedur Rahman"),
    ("QMN","Quazi Md Mohebur Rahman"),
    ("ISM","Md. Ismail Hossain Masum"),
)
LINE_MANAGER_ALL=(
    ("SO", "Mr. Saleh Omar"),
    ("MMR", "Mridha Md. Mashahedur Rahman"),
    ("QMN", "Quazi Md Mohebur Rahman"),
    ("ISM", "Md. Ismail Hossain Masum"),
    ("SH","Md. Shakhawat Hossain")
)
DEPARTMENT_HR=(
    ("humanresources","Human Resources"),
    ("managerial","Managerial")
)

DEPARTMENT_SW=(
("engineering","Engineering"),
)
regular_own_fieldsets=(
            (None, {'fields': ('username',)}),
            (_('Personal info'),{'fields': (
            'name',
            'email',
            'profile_picture',
           # 'profile_image',
            'employeeId',
            'designation',
            'presentAddress',
            'mobileNumber',
            'permanentAddress',
            'emergencyContact',
            'emergencyContactRelationship',
            'emergencyContactName',
            'department',
            'lead',
            'reportingSupervisor',
            'bloddGroup',
            'joiningDate',
            #'department_name',
            )}),
            # (_('Permissions'), {'fields': ('is_staff', 'is_superuser',#'is_active',#'is_staff', 'is_superuser',
            #                            'user_permissions'
            #                                )}),
        # (_('Joining Info'), {'fields': ( 'date_joined',)}),
)

regular_fieldsets=(
            (_('Personal info'),{'fields': (
            'name',
            'email',
            'profile_picture',
           # 'profile_image',
            'employeeId',
            'designation',
            'mobileNumber',
            'department',
            'lead',
            'reportingSupervisor',
            'bloddGroup',
            'joiningDate',
            )}),
        # (_('Joining Info'), {'fields': ( 'date_joined',)}),
            )
admin_fieldsets=(
            (None, {'fields': ('username',)}),
            (_('Personal info'),{'fields': (
            'name',
            'email',
            'profile_picture',
            'profile_image',
            'employeeId',
            'designation',
            'presentAddress',
            'mobileNumber',
            'permanentAddress',
            'emergencyContact',
            'emergencyContactRelationship',
            'emergencyContactName',
            'department',
            'lead',
            'reportingSupervisor',
            'bloddGroup',
            'joiningDate',
            #'department_name',
            )}),
            (_('Permissions'), {'fields': ('is_staff', 'is_superuser',#'is_active',#'is_staff', 'is_superuser',
                                       'user_permissions'
                                           )}),
        # (_('Joining Info'), {'fields': ( 'date_joined',)}),
            )

@admin.register(Group)
class GroupAdmin(admin.ModelAdmin):
    search_fields = ('name',)
    ordering = ('name',)
    filter_horizontal = ('permissions',)

    def formfield_for_manytomany(self, db_field, request=None, **kwargs):
        if db_field.name == 'permissions':
            qs = kwargs.get('queryset', db_field.remote_field.model.objects)
            # Avoid a major performance hit resolving permission names which
            # triggers a content_type load:
            kwargs['queryset'] = qs.select_related('content_type')
        return super().formfield_for_manytomany(db_field, request=request, **kwargs)

# def get_form():
#     print(User.is_staff.get_attname())
#     return UserForm
class MyForm(forms.ModelForm):
    def __init__(self, *args, **kwargs):
        self.request = kwargs.pop('request', None)
        super(MyForm, self).__init__(*args, **kwargs)
        instance = kwargs.get('instance', None)
        path = "C:\\Users\\jawad.arman\\Desktop\contact-management\\contact-management\\Lib\\site-packages\\django\\contrib\\auth\\form_data.txt"
        file = open(path, "r")
        input = file.readlines()
        input_line=input.__getitem__(0)
        input_list=input_line.split(",")
        user_status=input_list.__getitem__(0)
        user_name=input_list.__getitem__(1)
        print(user_status)
        print(user_name)
        if user_status =="1":
            UserAdmin.fieldsets=admin_fieldsets
            print("My form ")
            # for i in range(1,1000000000):
            #     pass
        else:
            if user_name==instance.username:
                UserAdmin.fieldsets=regular_own_fieldsets
            else:
                UserAdmin.fieldsets=regular_fieldsets

        if instance is not None and user_status == "1":
            if instance.username in USER_HR:
                self.fields['department'].choices = DEPARTMENT_HR
                self.fields['lead'].choices = (("ISMN", "N/A"),)
                self.fields['reportingSupervisor'].choices = (("SH", "Md. Shakhawat Hossain"),)
            elif instance.username in USER_HW:
                self.fields['department'].choices = DEPARTMENT_HW
                self.fields['lead'].choices = (("ISMN", "N/A"),)
                self.fields['reportingSupervisor'].choices = LINE_MANAGER
            elif instance.username in USER_SW:
                self.fields['department'].choices = DEPARTMENT_SW
                self.fields['lead'].choices = LEAD
                self.fields['reportingSupervisor'].choices = (("ISMN", "N/A"),)



@receiver(post_save, sender=User)
def user_post_save(sender, **kwargs):
    """
    Create a Profile instance for all newly created User instances. We only
    run on user creation to avoid having to check for existence on each call
    to User.save.
    """
    user, created = kwargs["instance"], kwargs["created"]
    if(created):
        print(user.username+" named User is created")

        #permission = Permission.objects.get(codename='can_view_AccessoryRequest')
        #print()
        #user.user_permissions.add(permission)


@receiver(user_logged_in)
def _user_logged_in(sender, user, request, **kwargs):

    print("Logged in...")
    path="C:\\Users\\jawad.arman\\Desktop\contact-management\\contact-management\\Lib\\site-packages\\django\\contrib\\auth\\form_data.txt"
    if user.is_superuser==True:
        file=open(path,"w")
        file.write("1")
        file.write(",")
        file.write(user.username)
        file.write(",")
        file.write("\n")
        file.close()
        #UserAdmin.fieldsets=admin_fieldsets
    else:
        file=open(path,"w")
        file.write("2")
        file.write(",")
        file.write(user.username)
        file.write(",")
        file.write("\n")
        file.close()
        #UserAdmin.fieldsets=regular_fieldsets
        
        # u = user.objects.get() #User.objects.get(username=new_user_name)
        # u.set_password('temporary')

        # permission = Permission.objects.get(name='can_view_user')
        # user.user_permissions.add(permission)

@receiver(user_logged_out)
def _user_logged_out(sender, user, request, **kwargs):
    print("Logged out")
    path = "C:\\Users\\jawad.arman\\Desktop\contact-management\\contact-management\\Lib\\site-packages\\django\\contrib\\auth\\form_data.txt"
    file = open(path, "w")
    file.write("")



@admin.register(User)
class UserAdmin(admin.ModelAdmin):
    add_form_template = 'admin/auth/user/add_form.html'
    change_user_password_template = None

    def profile_picture(self, obj):
        if obj.profile_image:
            return mark_safe('<img src="{url}" width=70 height=70 />'.format(
                    url=obj.profile_image.url,
                    width=obj.profile_image.width,
                    height=obj.profile_image.height,
                )
            )
        else:
            return "Not uploaded"

   # fieldsets = admin_fieldsets

    add_fieldsets = (
        (None, {
            'classes': ('wide',),
            'fields': ('username', 'password1', 'password2'),
        }),
    )
    #exclude = ('emergencyContact',)
    #form = UserChangeForm

    form= MyForm
#    form=UserForm
    add_form = UserCreationForm
    change_password_form = AdminPasswordChangeForm
    readonly_fields = ["profile_picture",]
    ordering = ('designation',)
    #list_display = ('name','designation','department','joiningDate','profile_picture', 'is_staff')
    list_display = ('profile_picture', 'name', 'mobileNumber', 'email', 'designation', 'department', 'bloddGroup')
    list_filter = ('designation', 'lead', 'reportingSupervisor', 'department')
    search_fields = ('username', 'first_name', 'last_name', 'email','mobileNumber')
    # ordering = ('username','designation','joiningDate')
    filter_horizontal = ('groups', 'user_permissions',)



    # fieldsets = (
    #     (None, {'fields': ('username', 'password')}),
    #     (_('Personal info'), {'fields': ('first_name', 'last_name', 'email')}),
    #     (_('Permissions'), {'fields': ('is_active', 'is_staff', 'is_superuser',
    #                                    'groups', 'user_permissions')}),
    #     (_('Important dates'), {'fields': ('last_login', 'date_joined')}),
    # )
    # add_fieldsets = (
    #     (None, {
    #         'classes': ('wide',),
    #         'fields': ('username', 'password1', 'password2'),
    #     }),
    # )
    # form = UserChangeForm
    # add_form = UserCreationForm
    # change_password_form = AdminPasswordChangeForm
    # list_display = ('username', 'email', 'first_name', 'last_name', 'is_staff')
    # list_filter = ('is_staff', 'is_superuser', 'is_active', 'groups')
    # search_fields = ('username', 'first_name', 'last_name', 'email')
    # ordering = ('username',)
    # filter_horizontal = ('groups', 'user_permissions',)


    def get_fieldsets(self, request, obj=None):
        if not obj:
            return self.add_fieldsets
        return super().get_fieldsets(request, obj)

    def get_form(self, request, obj=None, **kwargs):
        """
        Use special form during user creation
        """
        defaults = {}
        if obj is None:
            defaults['form'] = self.add_form
        defaults.update(kwargs)
        return super().get_form(request, obj, **defaults)

    def get_urls(self):
        return [
            path(
                '<id>/password/',
                self.admin_site.admin_view(self.user_change_password),
                name='auth_user_password_change',
            ),
        ] + super().get_urls()

    def lookup_allowed(self, lookup, value):
        # Don't allow lookups involving passwords.
        return not lookup.startswith('password') and super().lookup_allowed(lookup, value)

    @sensitive_post_parameters_m
    @csrf_protect_m
    def add_view(self, request, form_url='', extra_context=None):
        with transaction.atomic(using=router.db_for_write(self.model)):
            return self._add_view(request, form_url, extra_context)

    def _add_view(self, request, form_url='', extra_context=None):
        # It's an error for a user to have add permission but NOT change
        # permission for users. If we allowed such users to add users, they
        # could create superusers, which would mean they would essentially have
        # the permission to change users. To avoid the problem entirely, we
        # disallow users from adding users if they don't have change
        # permission.
        if not self.has_change_permission(request):
            if self.has_add_permission(request) and settings.DEBUG:
                # Raise Http404 in debug mode so that the user gets a helpful
                # error message.
                raise Http404(
                    'Your user does not have the "Change user" permission. In '
                    'order to add users, Django requires that your user '
                    'account have both the "Add user" and "Change user" '
                    'permissions set.')
            raise PermissionDenied
        if extra_context is None:
            extra_context = {}
        username_field = self.model._meta.get_field(self.model.USERNAME_FIELD)
        defaults = {
            'auto_populated_fields': (),
            'username_help_text': username_field.help_text,
        }
        extra_context.update(defaults)
        return super().add_view(request, form_url, extra_context)

    @sensitive_post_parameters_m
    def user_change_password(self, request, id, form_url=''):
        if not self.has_change_permission(request):
            raise PermissionDenied
        user = self.get_object(request, unquote(id))
        if user is None:
            raise Http404(_('%(name)s object with primary key %(key)r does not exist.') % {
                'name': self.model._meta.verbose_name,
                'key': escape(id),
            })
        if request.method == 'POST':
            form = self.change_password_form(user, request.POST)
            if form.is_valid():
                form.save()
                change_message = self.construct_change_message(request, form, None)
                self.log_change(request, user, change_message)
                msg = gettext('Password changed successfully.')
                messages.success(request, msg)
                update_session_auth_hash(request, form.user)
                return HttpResponseRedirect(
                    reverse(
                        '%s:%s_%s_change' % (
                            self.admin_site.name,
                            user._meta.app_label,
                            user._meta.model_name,
                        ),
                        args=(user.pk,),
                    )
                )
        else:
            form = self.change_password_form(user)

        fieldsets = [(None, {'fields': list(form.base_fields)})]
        adminForm = admin.helpers.AdminForm(form, fieldsets, {})

        context = {
            'title': _('Change password: %s') % escape(user.get_username()),
            'adminForm': adminForm,
            'form_url': form_url,
            'form': form,
            'is_popup': (IS_POPUP_VAR in request.POST or
                         IS_POPUP_VAR in request.GET),
            'add': True,
            'change': False,
            'has_delete_permission': False,
            'has_change_permission': True,
            'has_absolute_url': False,
            'opts': self.model._meta,
            'original': user,
            'save_as': False,
            'show_save': True,
            **self.admin_site.each_context(request),
        }

        request.current_app = self.admin_site.name

        return TemplateResponse(
            request,
            self.change_user_password_template or
            'admin/auth/user/change_password.html',
            context,
        )

    def response_add(self, request, obj, post_url_continue=None):
        """
        Determine the HttpResponse for the add_view stage. It mostly defers to
        its superclass implementation but is customized because the User model
        has a slightly different workflow.
        """
        # We should allow further modification of the user just added i.e. the
        # 'Save' button should behave like the 'Save and continue editing'
        # button except in two scenarios:
        # * The user has pressed the 'Save and add another' button
        # * We are adding a user in a popup
        if '_addanother' not in request.POST and IS_POPUP_VAR not in request.POST:
            request.POST = request.POST.copy()
            request.POST['_continue'] = 1
        return super().response_add(request, obj, post_url_continue)
